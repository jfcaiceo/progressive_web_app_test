//<% helpers = ActionController::Base.helpers %>
var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';
self.importScripts('<%= helpers.asset_pack_path "db.js" %>');
var DBManagerInstance = new DBManager('test_db');

function onInstall(event) {
  console.log('[Serviceworker] Installing!');
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        '<%= asset_path "application" %>',
        '<%= asset_path "application.scss" %>',
        '<%= helpers.asset_pack_path "application.js" %>',
        '<%= helpers.asset_pack_path "db.js" %>',
        '/offline.html'
      ]);
    })
  );
}

function onActivateCache(event) {
  console.log('[Serviceworker] Activating');
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

function onActivateClaim(event) {
  // Take control of all pages under this SW's scope immediately,
  // instead of waiting for reload/navigation.
  event.waitUntil(
    self.clients.claim()
  );
}

function onFetch(event) {
  var url = event.request.url
  var request = event.request.clone();
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request).then((response) => {
      // Save in database for offline connection if is a request for API
      if(event.request.method === 'GET' && isApiRequest(url)) {
        let response_clone = response.clone()
        response_clone.json().then((json) => {
          DBManagerInstance.saveToRequests(json, url)
        })
      }
      return response
    }).catch(() => {
      return handleFetchError(request);
    })
  );
}

function onSync(event) {
  let match = event.tag.match(/syncBackgroundRequest_([\d]+)/)
  if(!match) {
    return
  }
  let pendingId = parseInt(match[1])
  console.log('OnSync', event.tag)
  event.waitUntil(
    DBManagerInstance.getPendingRequest(pendingId).then((request) => {
      return fetch(request.url, {
        method: 'POST',
        headers: {
          'Accept': 'application/json',
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(request.data)
      }).then((_response) => {
        console.log('successfull background request')
        DBManagerInstance.deletePendingRequest(request.id)
        self.registration.showNotification(`${request.data.name} sync to backend`).catch((_error) => {
          console.log('Permission not granted')
        })
      })
    })
  )
}

function handleFetchError(request) {
  console.log('request error')
  var url = request.url
  if(isApiRequest(url) && request.method === 'GET') {
    return getFromDatabase(url)
  } else if(isApiRequest(url) && request.method === 'POST') {
    enqueueRequest(request)
    return new Response("{}", {"status" : 400 , "statusText" : "Not connection"})
  } else {
    // if it fails, try to return request from the cache
    return getFromStaticCache(request)
  }
}

function isApiRequest(url) {
  return url.match(/\/api\/.+/)
}

function getFromDatabase(url) {
  return DBManagerInstance.getFromRequests(url).then((data) => {
    data['fromCache'] = true
    return new Response(JSON.stringify(data), {"status" : 200 , "statusText" : "OK"});
  }).catch(() => {
    return new Response("{}", {"status" : 400 , "statusText" : "Not found in cache"});
  })
}

function enqueueRequest(request) {
  console.log('enqueue request');
  request.json().then((body) => {
    DBManagerInstance.saveToPendingRequests(body, request.url).then((response) => {
      console.log('save transaction', response.target.result);
      let id = response.target.result;
      self.registration.sync.register(`syncBackgroundRequest_${id}`).then(function() {
        console.log('Sync registered');
      }).catch(function(err) {
        console.log('Sync registration failed');
        console.log(err.message);
      });

    })
  })
}

function getFromStaticCache(request) {
  return caches.match(request).then(function(response) {
    if (response) {
      return response;
    }
    // if not found in cache, return default offline content for navigate requests
    if (request.mode === 'navigate' ||
      (request.method === 'GET' && request.headers.get('accept').includes('text/html'))) {
      console.log('[Serviceworker] Fetching offline content');
      return caches.match('/offline.html');
    }
  })
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivateCache);
self.addEventListener('activate', onActivateClaim);
self.addEventListener('fetch', onFetch);
self.addEventListener('sync', onSync);
