//<% helpers = ActionController::Base.helpers %>
var CACHE_VERSION = 'v1';
var CACHE_NAME = CACHE_VERSION + ':sw-cache-';
self.importScripts('<%= helpers.asset_pack_path "db.js" %>');
var DBManagerInstance = new DBManager('test_db');

function onInstall(event) {
  console.log('[Serviceworker] Installing!');
  event.waitUntil(
    caches.open(CACHE_NAME).then(function prefill(cache) {
      return cache.addAll([
        '<%= asset_path "application" %>',
        '<%= asset_path "application.scss" %>',
        '<%= helpers.asset_pack_path "application.js" %>',
        '<%= helpers.asset_pack_path "db.js" %>',
        '/offline.html'
      ]);
    })
  );
}

function onActivateCache(event) {
  console.log('[Serviceworker] Activating');
  event.waitUntil(
    caches.keys().then(function(cacheNames) {
      return Promise.all(
        cacheNames.filter(function(cacheName) {
          // Return true if you want to remove this cache,
          // but remember that caches are shared across
          // the whole origin
          return cacheName.indexOf(CACHE_VERSION) !== 0;
        }).map(function(cacheName) {
          return caches.delete(cacheName);
        })
      );
    })
  );
}

function onActivateClaim(event) {
  // Take control of all pages under this SW's scope immediately,
  // instead of waiting for reload/navigation.
  event.waitUntil(
    self.clients.claim()
  );
}

function onFetch(event) {
  event.respondWith(
    // try to return untouched request from network first
    fetch(event.request).then((response) => {
      var url = event.request.url
      if(url.match(/\/api\/.+/)) {
        let response_clone = response.clone()
        response_clone.json().then((json) => {
          DBManagerInstance.saveToRequests(json, url)
        })
      }
      return response
    }).catch(() => {
      var url = event.request.url
      if(url.match(/\/api\/.+/)) {
        return DBManagerInstance.getFromRequests(url).then((data) => {
          data['fromCache'] = true
          return new Response(JSON.stringify(data), {"status" : 200 , "statusText" : "OK"});
        }).catch(() => {
          return new Response("{}", {"status" : 400 , "statusText" : "Not found in cache"});
        })
      } else {
        // if it fails, try to return request from the cache
        return caches.match(event.request).then(function(response) {
          if (response) {
            return response;
          }
          // if not found in cache, return default offline content for navigate requests
          if (event.request.mode === 'navigate' ||
            (event.request.method === 'GET' && event.request.headers.get('accept').includes('text/html'))) {
            console.log('[Serviceworker] Fetching offline content');
            return caches.match('/offline.html');
          }
        })
      }
    })
  );
}

self.addEventListener('install', onInstall);
self.addEventListener('activate', onActivateCache);
self.addEventListener('activate', onActivateClaim);
self.addEventListener('fetch', onFetch);
